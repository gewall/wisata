datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


model Wisata {
    id              String          @id @default(cuid())
    slug            String          @unique
    nama            String
    alamat          String
    kunjungan       Int
    telepon         Int
    deskripsi       String
    sampul          String
    galeri          String

    komentars       Komentar[]

     
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Rating {
    id              String          @id @default(cuid())
    komentarId      String
    rating          Int

    komentar        Komentar        @relation(fields: [komentarId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model Komentar {
    id              String          @id @default(cuid())
    userTempId      String          @unique @default(cuid())
    wisataId        String
    text            String
    nama            String

    rating          Rating[]

    wisata          Wisata          @relation(fields: [wisataId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String
  password      String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}